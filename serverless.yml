# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: cloudgenie
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: notes-app
service: notes-app-api-service

plugins:
  - serverless-iam-roles-per-function
  - serverless-api-gateway-caching
  - serverless-offline
  - serverless-add-api-key

package:
  individually: true

build:
  esbuild: 
    bundle: true
    minify: false
    target: 'node20'
    buildConcurrency: 2
    sourcemap:
      type: linked
      setNodeOptions: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 1
  apiGateway:
    minimumCompressionSize: 0 #making this to 0 bytes so that it compress for mini payload also
    apiKeySourceType: HEADER
  environment:
    TABLE_NAME: notes-table-${self:provider.stage}
    LOG_LEVEL: ${env:LOG_LEVEL, 'INFO'}


custom:
  stage: ${opt:stage, 'dev'}
  apiKeys:
    - name: notes-api-key-${self:provider.stage}
      usagePlan:
        name: Notes-api-key-usage-plan-${self:provider.stage}
        description: "An Usage Plan setup for the Api Key"
        quota:
          # rate limiting and throttling globally
          limit: 3000
          period: MONTH
        throttle:
          burstLimit: 200
          rateLimit: 100
      noEcho: true
  apiGatewayCaching:
    enabled: true
    clusterSize: '0.5'
    ttlInSeconds: 300
  apiGatewayThrottling:
    maxRequestPerSecond: 200
    maxConcurrentRequests: 100
  output:
    file: .serverless/output.json

functions:
  create-note:
    handler: src/lambda/createNote.handler
    timeout: 30
    memorySize: 512
    description: A Function to create note and store it in the database
    events:
      - http:
          path: create-note
          method: post
          private: true # this makes api key is required
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"
    tags:
      service: notes-api-service
      creator: subbusainathr
      name: create-note-lambda

  get-note:
    handler: src/lambda/getNote.handler
    timeout: 30
    memorySize: 512
    description: A Function to get notes which is stored in the database
    events:
      - http:
          path: get-note/{noteId}
          method: get
          private: true # this makes api key is required
          caching:
            enabled: true
            cacheKeyParameters:
              - name: request.path.noteId
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:GetItem"
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"
    tags:
      service: notes-api-service
      creator: subbusainathr
      name: get-note-lambda

  update-note:
    handler: src/lambda/updateNote.handler
    timeout: 30
    memorySize: 512
    description: A Function to update the notes which is stored in the database
    events:
      - http:
          path: update-note/{noteId}
          method: put
          private: true # this makes api key is required
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"
    tags:
      service: notes-api-service
      creator: subbusainathr
      name: update-note-lambda

  delete-note:
    handler: src/lambda/deleteNote.handler
    timeout: 30
    memorySize: 512
    description: A Function to delete the notes which is stored in the database
    events:
      - http:
          path: delete-note/{noteId}
          method: delete
          private: true # this makes api key is required
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:DeleteItem"
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_NAME}"
    tags:
      service: notes-api-service
      creator: subbusainathr
      name: delete-note-lambda

resources:
  Resources:
    NotesTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: "noteId"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "noteId"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
      DeletionPolicy: Delete
  Outputs:
    ApiUrl:
      Description: "The API Gateway URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:provider.stage}"